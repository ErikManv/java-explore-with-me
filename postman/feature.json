{
  "info": {
    "_postman_id": "3ba77a6d-379f-48d3-98ff-493055a0e5f6",
    "name": "Feature tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26535016"
  },
  "item": [
    {
      "name": "preparation",
      "item": [
        {
          "name": "Создание пользователя 0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"user User\",\r\n  \"email\": \"user@mail.ru\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание пользователя 1",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"user User1\",\r\n  \"email\": \"user@mail.ru1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание категории 0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\" : \"Games\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание события 0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n    \"annotation\": \"Qui harum est tenetur perferendis magnam. Optio repellendus rerum libero laudantium ut molestiae aperiam quia voluptate. Quidem voluptatem tenetur.\",\r\n    \"category\": 0,\r\n    \"description\": \"Ut et dolorem qui earum ducimus omnis non aut. Quia qui vero. Accusamus odio vel impedit tempora dignissimos et est. Aliquid aut dolor culpa maiores sequi sed. Quasi facilis atque numquam optio.\\n \\rCommodi qui unde consequatur. Voluptas omnis sed quam quo qui nemo. Nisi quia molestias mollitia aut. Ut exercitationem cupiditate sit aut.\\n \\rRerum deleniti a illo eum soluta velit aut velit. Doloribus vel recusandae magni ducimus maxime sunt non. Earum quis possimus provident nam laborum ipsam deleniti dignissimos.\",\r\n    \"eventDate\": \"2023-05-05 03:54:53\",\r\n    \"location\": {\r\n        \"lat\": -84.9626,\r\n        \"lon\": -171.4857\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 5,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Eveniet et quis debitis voluptas.\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Публикация события",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"annotation\": \"Qui harum est tenetur perferendis magnam. Optio repellendus rerum libero laudantium ut molestiae aperiam quia voluptate. Quidem voluptatem tenetur.\",\r\n    \"category\": 0,\r\n    \"description\": \"Ut et dolorem qui earum ducimus omnis non aut. Quia qui vero. Accusamus odio vel impedit tempora dignissimos et est. Aliquid aut dolor culpa maiores sequi sed. Quasi facilis atque numquam optio.\\n \\rCommodi qui unde consequatur. Voluptas omnis sed quam quo qui nemo. Nisi quia molestias mollitia aut. Ut exercitationem cupiditate sit aut.\\n \\rRerum deleniti a illo eum soluta velit aut velit. Doloribus vel recusandae magni ducimus maxime sunt non. Earum quis possimus provident nam laborum ipsam deleniti dignissimos.\",\r\n    \"eventDate\": \"2023-05-05 03:54:53\",\r\n    \"location\": {\r\n        \"lat\": -84.9626,\r\n        \"lon\": -171.4867\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 5,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Eveniet et quis debitis voluptas.\",\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "valid/error",
      "item": [
        {
          "name": "Создание комментария с некорреткным body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "0"
                },
                {
                  "key": "eventId",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание комментария если event не существует",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"text\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "0"
                },
                {
                  "key": "eventId",
                  "value": "10000"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание комментария если user не существует",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"text\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "100000"
                },
                {
                  "key": "eventId",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Создание комментария event 0 user 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); ",
              "",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be text').to.eql(\"text\");",
              "});",
              "",
              "pm.test(\"Test comment 'eventId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('eventId');",
              "    pm.expect(jsonData.eventId, '\"eventId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'authorId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('authorId');",
              "    pm.expect(jsonData.authorId, '\"authorId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'created' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('created');",
              "    pm.expect(jsonData.start, '\"created\"  must be \"' + pm.environment.get('created2') + '\"').to.eql(pm.environment.get('created2'));",
              "    });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"text\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "0"
            },
            {
              "key": "eventId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание комментария event 0 user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); ",
              "",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
              "});",
              "",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be text').to.eql(\"text2\");",
              "});",
              "",
              "pm.test(\"Test comment 'eventId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('eventId');",
              "    pm.expect(jsonData.eventId, '\"eventId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'authorId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('authorId');",
              "    pm.expect(jsonData.authorId, '\"authorId\" must be 1').to.eql(1);",
              "});",
              "",
              "pm.test(\"Test comment 'created' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('created');",
              "    pm.expect(jsonData.start, '\"created\"  must be \"' + pm.environment.get('created2') + '\"').to.eql(pm.environment.get('created2'));",
              "    });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"text2\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментария 0 события 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); ",
              "",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be text').to.eql(\"text\");",
              "});",
              "",
              "pm.test(\"Test comment 'eventId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('eventId');",
              "    pm.expect(jsonData.eventId, '\"eventId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'authorId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('authorId');",
              "    pm.expect(jsonData.authorId, '\"authorId\" must be 0').to.eql(0);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "0"
            },
            {
              "key": "commentId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление комментария 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); ",
              "",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be text').to.eql(\"text1\");",
              "});",
              "",
              "pm.test(\"Test comment 'eventId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('eventId');",
              "    pm.expect(jsonData.eventId, '\"eventId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'authorId' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('authorId');",
              "    pm.expect(jsonData.authorId, '\"authorId\" must be 0').to.eql(0);",
              "});",
              "",
              "pm.test(\"Test comment 'created' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('created');",
              "    pm.expect(jsonData.start, '\"created\"  must be \"' + pm.environment.get('created2') + '\"').to.eql(pm.environment.get('created2'));",
              "    });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"text1\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "0"
            },
            {
              "key": "commentId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение собственных комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); "
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение  комментариев события 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
              "    pm.response.to.be.success; // код ответа должен быть равен успех",
              "    pm.response.to.be.withBody; // ответ должен содержать тело",
              "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
              "}); "
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/event/:eventId/comments?sort=ASC",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "event",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "sort",
              "value": "ASC"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "0"
            },
            {
              "key": "commentId",
              "value": "0"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария 1 admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}